package com.sm.kr.service;

import java.util.NoSuchElementException;

import org.springframework.stereotype.Service;

import com.sm.kr.dto.BootCreateDTO;
import com.sm.kr.dto.BootReadResponseDTO;
import com.sm.kr.entity.Boot;
import com.sm.kr.entity.BootRepository;

@Service //이클래스가 서비스 컴포넌트임을 나타내고 
//spring이 이 클래스를 Bean으로 등록하여 DI(의존성 주입)등을 가능하게 해줌
public class BootService {
	
	//BootRepository를 생성자로 주입받음{생성자 기반 의존성 주입}
	//jpa리파지토리 db에 저장 /조회 기능 수행
	//why 생성자 1)bootRepository를 BootService DB작업을 하면 
//bootRepository는 우리가 직접 객체로 만들지 않고 
	//Spring 관리하는건 빈
	// 스프링이 자동으로 주입해줄수 잇게 하기위해 해주는 것이 생성자 주입입니다
	
	private BootRepository bootRepository;
	
	
	//BootService 생성자 만듬 BootRepository를 매개변수로 생성자 주입
	public BootService(BootRepository bootRepository) {
		this.bootRepository = bootRepository;
	}
	
	//비즈니스로직 insert
	public Integer insert(BootCreateDTO bootCreateDTO) {
		Boot boot = Boot.builder().
		title(bootCreateDTO.getTitle())
		.price(bootCreateDTO.getPrice())
		.build();
		this.bootRepository.save(boot);	//데이터 베이스 한줄을 저장소에 저장 	

		return boot.getBootId();
	}
	
	//비즈니스로직 read
	public BootReadResponseDTO read(Integer bootId) throws NoSuchElementException{
/*
BootReadResponseDTO : 리턴 타입 (클라이언트에 응답할 객체)
read(Integer bootId) :파라미터로 하나의 id를 받음
throws NoSuchElementException : 해당 id가 없으면 예외발생
*/
		Boot boot = this.bootRepository.findById(bootId).orElseThrow();
		//커맨드 부트에 = 현재클래스에 리파지토리객체(bootRepository)에서 pk을 찾거나 예외가 발생되거나 findById jpa에서 제공하는 메서드
		
	}
	
	
	
	
	
	
	
	
	
	
	
}
